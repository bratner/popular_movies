apply plugin: 'com.android.application'

android {
    compileSdkVersion 26
    buildToolsVersion '27.0.3'
    defaultConfig {
        applicationId "il.co.ratners.popularmovies"
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

    }

    applicationVariants.all { variant ->
        variant.buildConfigField "String", "API_KEY", "\"" + getApiKey() + "\""
    }

    dataBinding.enabled = true
}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:recyclerview-v7:26.1.0'
    implementation 'com.android.support:cardview-v7:26.1.0'
    implementation 'com.squareup.picasso:picasso:2.5.2'
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.10.0'
    implementation 'com.google.code.gson:gson:2.8.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}


def getApiKey() {
    Properties props = new Properties()
    File propFile = new File('project.properties');
    if (propFile.isFile()) {
        props.load(new FileInputStream(propFile))
        if(!props.containsKey('API_KEY')) {
            project.logger.lifecycle("Unable to find API_KEY in project.properties!")
            throw new Exception("Unable to find API_KEY in project.properties!")
        }
        project.logger.lifecycle("Found API_KEY in project.properties.")
    } else if(System.getenv().containsKey('TMDB_API_KEY')) {
        project.logger.lifecycle("Found API_KEY in environment.")
        props.setProperty('API_KEY', System.getenv('TMDB_API_KEY'))
    } else {
        throw new Exception("Unable to find API_KEY nor in project.properties nor the environment.")
    }

    return props['API_KEY']
}